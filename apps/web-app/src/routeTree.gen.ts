/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UserRouteImport } from './routes/user'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthCallbackRouteImport } from './routes/auth/callback'
import { Route as AuthLinkIndexRouteImport } from './routes/auth/link/index'
import { Route as AuthLinkRobloxRouteImport } from './routes/auth/link/roblox'

const UserRoute = UserRouteImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthCallbackRoute = AuthCallbackRouteImport.update({
  id: '/auth/callback',
  path: '/auth/callback',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLinkIndexRoute = AuthLinkIndexRouteImport.update({
  id: '/auth/link/',
  path: '/auth/link/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLinkRobloxRoute = AuthLinkRobloxRouteImport.update({
  id: '/auth/link/roblox',
  path: '/auth/link/roblox',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/user': typeof UserRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/auth/link/roblox': typeof AuthLinkRobloxRoute
  '/auth/link': typeof AuthLinkIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/user': typeof UserRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/auth/link/roblox': typeof AuthLinkRobloxRoute
  '/auth/link': typeof AuthLinkIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/user': typeof UserRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/auth/link/roblox': typeof AuthLinkRobloxRoute
  '/auth/link/': typeof AuthLinkIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/user'
    | '/auth/callback'
    | '/auth/link/roblox'
    | '/auth/link'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/user'
    | '/auth/callback'
    | '/auth/link/roblox'
    | '/auth/link'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/register'
    | '/user'
    | '/auth/callback'
    | '/auth/link/roblox'
    | '/auth/link/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  UserRoute: typeof UserRoute
  AuthCallbackRoute: typeof AuthCallbackRoute
  AuthLinkRobloxRoute: typeof AuthLinkRobloxRoute
  AuthLinkIndexRoute: typeof AuthLinkIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/user': {
      id: '/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/callback': {
      id: '/auth/callback'
      path: '/auth/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof AuthCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/link/': {
      id: '/auth/link/'
      path: '/auth/link'
      fullPath: '/auth/link'
      preLoaderRoute: typeof AuthLinkIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/link/roblox': {
      id: '/auth/link/roblox'
      path: '/auth/link/roblox'
      fullPath: '/auth/link/roblox'
      preLoaderRoute: typeof AuthLinkRobloxRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  UserRoute: UserRoute,
  AuthCallbackRoute: AuthCallbackRoute,
  AuthLinkRobloxRoute: AuthLinkRobloxRoute,
  AuthLinkIndexRoute: AuthLinkIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
