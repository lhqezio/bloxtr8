name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '10.16.1'

jobs:
  ci:
    name: CI
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18, 20, 22]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for Turbo cache

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Prisma generated files
        uses: actions/cache@v4
        with:
          path: |
            packages/database/src/generated
            packages/database/dist/generated
            node_modules/.prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('packages/database/prisma/schema.prisma') }}
          restore-keys: |
            ${{ runner.os }}-prisma-

      - name: Setup development environment
        run: |
          # Copy encrypted development environment to .env
          cp .env.development .env
          
          # Debug: Check if we have the right private key
          echo "Checking private key format..."
          if [[ "${{ secrets.DOTENV_PRIVATE_KEY_DEV }}" == dotenv://* ]]; then
            echo "✓ Private key format looks correct"
          else
            echo "✗ Private key format looks wrong - should start with 'dotenv://'"
          fi
          
          echo "✓ Development environment setup complete"

      - name: Generate Prisma client
        run: pnpm db:generate
        env:
          DOTENV_PRIVATE_KEY: ${{ secrets.DOTENV_PRIVATE_KEY_DEV }}

      - name: Push database schema
        run: pnpm db:push
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          DOTENV_PRIVATE_KEY: ${{ secrets.DOTENV_PRIVATE_KEY_DEV }}

      - name: Cache Turbo cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ hashFiles('**/package.json', '**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Setup production environment
        run: |
          # Copy encrypted production environment to .env
          cp .env.production .env

          echo "✓ Production environment setup complete"

      - name: Build packages
        run: pnpm build
        env:
          DOTENV_PRIVATE_KEY: ${{ secrets.DOTENV_PRIVATE_KEY_PRODUCTION }}

      - name: Lint packages
        run: pnpm lint

      - name: Check formatting
        run: pnpm format:check

      - name: Setup test environment
        run: |
          # Copy encrypted development environment to .env.development.local
          cp .env.development .env.development.local
          
          echo "✓ Test environment setup complete"

      - name: Run tests
        run: pnpm test
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          DOTENV_PRIVATE_KEY: ${{ secrets.DOTENV_PRIVATE_KEY_DEV }}

      - name: Upload build artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-node-${{ matrix.node-version }}
          path: |
            apps/*/dist/
            packages/*/dist/
          retention-days: 7

      - name: Upload test results on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-node-${{ matrix.node-version }}
          path: |
            coverage/
            **/coverage/
          retention-days: 7

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: logs-node-${{ matrix.node-version }}
          path: |
            .turbo/
            **/*.log
          retention-days: 7

  # Separate job for database setup and integration tests
  database-tests:
    name: Database Tests
    runs-on: ubuntu-latest
    needs: ci

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup development environment for database tests
        run: |
          # Copy encrypted development environment to .env
          cp .env.development .env

          echo "✓ Development environment setup complete"

      - name: Generate Prisma client
        run: pnpm db:generate
        env:
          DOTENV_PRIVATE_KEY: ${{ secrets.DOTENV_PRIVATE_KEY_DEV }}

      - name: Push database schema
        run: pnpm db:push
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          DOTENV_PRIVATE_KEY: ${{ secrets.DOTENV_PRIVATE_KEY_DEV }}

      - name: Run database tests
        run: pnpm --filter=@bloxtr8/database test --passWithNoTests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          DOTENV_PRIVATE_KEY: ${{ secrets.DOTENV_PRIVATE_KEY_DEV }}

      - name: Upload database test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: database-test-results
          path: |
            packages/database/coverage/
            packages/database/dist/
          retention-days: 7
